<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><!-- saved from url=(0014)about:internet --><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" href="../../../style.css" type="text/css" media="screen"><link rel="stylesheet" href="../../../print.css" type="text/css" media="print"><link rel="stylesheet" href="../../../override.css" type="text/css"><meta name="keywords" content="ExternalInterfaceStack,com.amaze.external.ExternalInterfaceStack,ERROR,INITIALIZED,STACK_MODE_FIFO,STACK_MODE_LIFO,delay,flashReady,javascriptReady,repeat,timeInterval,timerInterval,addCall,getInstance,getRegisteredFunctionsCount,initialize,isExecutionRunning,pauseExecution,removeCall,startExecution,stop"><title>com.amaze.external.ExternalInterfaceStack</title></head><body><script language="javascript" type="text/javascript" src="../../../asdoc.js"></script><script language="javascript" type="text/javascript" src="../../../help.js"></script><script language="javascript" type="text/javascript" src="../../../cookies.js"></script><script language="javascript" type="text/javascript"><!--
				asdocTitle = 'ExternalInterfaceStack - API Documentation';
				var baseRef = '../../../';
				window.onload = configPage;
			--></script>
<script type="text/javascript">
			scrollToNameAnchor();
		</script><table class="titleTable" cellpadding="0" cellspacing="0" id="titleTable" style="display:none"><tr><td class="titleTableTitle" align="left">API Documentation</td><td class="titleTableTopNav" align="right"><a href="../../../package-summary.html" onclick="loadClassListFrame('../../../all-classes.html')">All Packages</a>&nbsp;|&nbsp;<a href="../../../class-summary.html" onclick="loadClassListFrame('../../../all-classes.html')">All Classes</a>&nbsp;|&nbsp;<a href="../../../all-index-A.html" onclick="loadClassListFrame('../../../index-list.html')">Index</a>&nbsp;|&nbsp;<a id="framesLink1" href="../../../index.html?com/amaze/external/ExternalInterfaceStack.html&amp;com/amaze/external/class-list.html">Frames</a><a id="noFramesLink1" style="display:none" href="" onclick="parent.location=document.location"> No Frames </a></td><td class="titleTableLogo" align="right" rowspan="3"><img src="../../../images/logo.jpg" class="logoImage" alt=" Adobe Logo " title=" Adobe Logo "></td></tr><tr class="titleTableRow2"><td class="titleTableSubTitle" id="subTitle" align="left">ExternalInterfaceStack</td><td class="titleTableSubNav" id="subNav" align="right"><a href="#propertySummary">Properties</a>&nbsp;| <a href="#methodSummary">Methods</a>&nbsp;| <a href="#constantSummary">Constants</a></td></tr><tr class="titleTableRow3"><td colspan="3">&nbsp;</td></tr></table><script language="javascript" type="text/javascript" xml:space="preserve">
				<!--
				
					if (!isEclipse() || window.name != ECLIPSE_FRAME_NAME) {titleBar_setSubTitle("ExternalInterfaceStack"); titleBar_setSubNav(true,true,false,false,false,false,false,false,true,false,false	,false,false,false,false,false);}	
				-->
			</script><div xmlns:fn="http://www.w3.org/2005/xpath-functions" class="MainContent"><table class="classHeaderTable" cellpadding="0" cellspacing="0"><tr><td class="classHeaderTableLabel">Package</td><td><a href="package-detail.html" onclick="javascript:loadClassListFrame('class-list.html')">com.amaze.external</a></td></tr><tr><td class="classHeaderTableLabel">Class</td><td class="classSignature">public  class  ExternalInterfaceStack</td></tr><tr><td class="classHeaderTableLabel">Inheritance</td><td class="inheritanceList">ExternalInterfaceStack  <img src="../../../images/inherit-arrow.gif" title="Inheritance" alt="Inheritance" class="inheritArrow"> Object</td></tr></table><p></p><p></p><p></p>
	 ExternalInterfaceStack implements a stack for JavaScript calls from AS3 via the ExternalInterface Class. Sometimes
	 if you use too many JS Calls at the same time, not all JS Calls will be handled correctly. With this 
	 class you can use a stack which will call the js functions asynchronous with a timer. You are also able to
	 get rid of double called functions.		
	 <p></p><br/><hr></div><a name="propertySummary"></a><div class="summarySection"><div class="summaryTableTitle">Public Properties</div><table cellspacing="0" cellpadding="3" class="summaryTable " id="summaryTableProperty"><tr><th>&nbsp;</th><th colspan="2">Property</th><th class="summaryTableOwnerCol">Defined By</th></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><a href="#timeInterval" class="signatureLink">timeInterval</a> : int<div class="summaryTableDescription">[read-only] </div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><a href="#timerInterval" class="signatureLink">timerInterval</a> : int<div class="summaryTableDescription">[write-only] 
		 Setter method for timer interval value.</div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr></table></div><a name="methodSummary"></a><div class="summarySection"><div class="summaryTableTitle">Public Methods </div><table cellspacing="0" cellpadding="3" class="summaryTable " id="summaryTableMethod"><tr><th>&nbsp;</th><th colspan="2">Method</th><th class="summaryTableOwnerCol">Defined By</th></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><div class="summarySignature"><a href="#ExternalInterfaceStack()" class="signatureLink">ExternalInterfaceStack</a>(stackMode:int)</div><div class="summaryTableDescription">
		 Constructor.</div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><div class="summarySignature"><a href="#addCall()" class="signatureLink">addCall</a>(funcName:String, parameter:Object = null, resultHandler:Function = null, skipOldCalls:Boolean = false, convert2JSON:Boolean = false):int</div><div class="summaryTableDescription">
		 Adds a JavaScript function call to call stack.</div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><div class="summarySignature"><a href="#getInstance()" class="signatureLink">getInstance</a>():<a href="../../../com/amaze/external/ExternalInterfaceStack.html">ExternalInterfaceStack</a></div><div class="summaryTableDescription">[static] 
		 Singleton method.</div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><div class="summarySignature"><a href="#getRegisteredFunctionsCount()" class="signatureLink">getRegisteredFunctionsCount</a>():int</div><div class="summaryTableDescription">
		 Returns the number of registered functions which have not yet been executed.</div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><div class="summarySignature"><a href="#isExecutionRunning()" class="signatureLink">isExecutionRunning</a>():Boolean</div><div class="summaryTableDescription">
		 Returns true if the timer is running.</div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><div class="summarySignature"><a href="#pauseExecution()" class="signatureLink">pauseExecution</a>():void</div><div class="summaryTableDescription">
		 Pauses the execution of JavaScript calls.</div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><div class="summarySignature"><a href="#removeCall()" class="signatureLink">removeCall</a>(id:int):Boolean</div><div class="summaryTableDescription">
		 Removes a JavaScript call from stack.</div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><div class="summarySignature"><a href="#startExecution()" class="signatureLink">startExecution</a>():void</div><div class="summaryTableDescription">
		 Restarts the execution of JavaScript calls.</div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr></table></div><a name="constantSummary"></a><div class="summarySection"><div class="summaryTableTitle">Public Constants</div><table cellspacing="0" cellpadding="3" class="summaryTable " id="summaryTableConstant"><tr><th>&nbsp;</th><th colspan="2">Constant</th><th class="summaryTableOwnerCol">Defined By</th></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><a href="#STACK_MODE_FIFO" class="signatureLink">STACK_MODE_FIFO</a> : int = 1<div class="summaryTableDescription">[static] </div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr><tr class=""><td class="summaryTablePaddingCol">&nbsp;</td><td class="summaryTableInheritanceCol">&nbsp;</td><td class="summaryTableSignatureCol"><a href="#STACK_MODE_LIFO" class="signatureLink">STACK_MODE_LIFO</a> : int = 0<div class="summaryTableDescription">[static] </div></td><td class="summaryTableOwnerCol">ExternalInterfaceStack</td></tr></table></div><script language="javascript" type="text/javascript"><!--
										showHideInherited();
										--></script><div class="MainContent"><div class="detailSectionHeader">Property Detail</div><a name="propertyDetail"></a><a name="timeInterval"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">timeInterval</td><td class="detailHeaderType">property</td></tr></table><div class="detailBody"><code>timeInterval:int</code>&nbsp;&nbsp;[read-only] <p></p><br/><span class="label"> Implementation </span><br/><code>&nbsp;&nbsp;&nbsp;&nbsp;public function get timeInterval():int</code><br/></div><a name="propertyDetail"></a><a name="timerInterval"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">timerInterval</td><td class="detailHeaderType">property</td><td class="detailHeaderRule">&nbsp;</td></tr></table><div class="detailBody"><code>timerInterval:int</code>&nbsp;&nbsp;[write-only] <p></p><p></p><p>
		 Setter method for timer interval value.
		 
		 </p><br/><span class="label"> Implementation </span><br/><code>&nbsp;&nbsp;&nbsp;&nbsp;public function set timerInterval(value:int):void</code><br/></div><a name="constructorDetail"></a><div class="detailSectionHeader">Constructor Detail</div><a name="ExternalInterfaceStack()"></a><a name="ExternalInterfaceStack(int)"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">ExternalInterfaceStack</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">Constructor</td></tr></table><div class="detailBody"><code>public function ExternalInterfaceStack(stackMode:int)</code><p></p><p>
		 Constructor. Singleton class, do not instantiate directly, use 
		 <code>getInstance</code> method.
		 
		 </p><span class="label"> Parameters </span><table cellpadding="0" cellspacing="0" border="0"><tr><td width="20px"></td><td><code><span class="label">stackMode</span>:int</code> (default = <code>NaN</code>)<code></code> &mdash; stack mode of handling stack entries
		 </td></tr></table></div><a name="methodDetail"></a><div class="detailSectionHeader">Method Detail</div><a name="addCall()"></a><a name="addCall(String,Object,Function,Boolean,Boolean)"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">addCall</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td></tr></table><div class="detailBody"><code> public function addCall(funcName:String, parameter:Object = null, resultHandler:Function = null, skipOldCalls:Boolean = false, convert2JSON:Boolean = false):int</code><p></p><p></p><p>
		 Adds a <code>JavaScript</code> function call to call stack.
		 
		 </p><p><span class="label"> Parameters </span><table cellpadding="0" cellspacing="0" border="0"><tr><td width="20px"></td><td><code><span class="label">funcName</span>:String</code> &mdash; 	function name of js function to call
		 </td></tr><tr><td class="paramSpacer">&nbsp;</td></tr><tr><td width="20px"></td><td><code><span class="label">parameter</span>:Object</code> (default = <code>null</code>)<code></code> &mdash; 	<code>Object</code> of parameters to path to the <code>JavaScript</code> function
		 							<code>Object</code> will be converted to <code>JSON</code> and hand over a <code>JSON-Object</code>.
		 </td></tr><tr><td class="paramSpacer">&nbsp;</td></tr><tr><td width="20px"></td><td><code><span class="label">resultHandler</span>:Function</code> (default = <code>null</code>)<code></code> &mdash; method to handle <code>JavaScript</code> results
		 </td></tr><tr><td class="paramSpacer">&nbsp;</td></tr><tr><td width="20px"></td><td><code><span class="label">skipOldCalls</span>:Boolean</code> (default = <code>false</code>)<code></code> &mdash; if <code>true</code> older calls in stack of the same functionname won't be 
		 							called any more, only latest call
		 </td></tr><tr><td class="paramSpacer">&nbsp;</td></tr><tr><td width="20px"></td><td><code><span class="label">convert2JSON</span>:Boolean</code> (default = <code>false</code>)<code></code> &mdash; if <code>true</code> the parameter object will be converted to JSON for the <code>JavaScript</code> call
		 
		 </td></tr></table></p><p></p><span class="label">Returns</span><table cellpadding="0" cellspacing="0" border="0"><tr><td width="20"></td><td><code>int</code> &mdash; value of stack position, returns -1 if <code>ExternalInterface</code> is not available
		 </td></tr></table></div><a name="getInstance()"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">getInstance</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td></tr></table><div class="detailBody"><code> public static function getInstance():<a href="../../../com/amaze/external/ExternalInterfaceStack.html">ExternalInterfaceStack</a></code><p></p><p></p><p>
		 Singleton method. 
		 
		 </p><p></p><span class="label">Returns</span><table cellpadding="0" cellspacing="0" border="0"><tr><td width="20"></td><td><code><a href="../../../com/amaze/external/ExternalInterfaceStack.html">ExternalInterfaceStack</a></code> &mdash; single instance of <code>ExternalInterfaceStack</code>
		 </td></tr></table></div><a name="getRegisteredFunctionsCount()"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">getRegisteredFunctionsCount</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td></tr></table><div class="detailBody"><code> public function getRegisteredFunctionsCount():int</code><p></p><p></p><p>
		 Returns the number of registered functions which have not yet been executed.
		  
		 </p><p></p><span class="label">Returns</span><table cellpadding="0" cellspacing="0" border="0"><tr><td width="20"></td><td><code>int</code> &mdash; the number of registered functions which have not yet been executed
		 </td></tr></table></div><a name="isExecutionRunning()"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">isExecutionRunning</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td></tr></table><div class="detailBody"><code> public function isExecutionRunning():Boolean</code><p></p><p></p><p>
		 Returns <code>true</code> if the timer is running.
		  
		 </p><p></p><span class="label">Returns</span><table cellpadding="0" cellspacing="0" border="0"><tr><td width="20"></td><td><code>Boolean</code> &mdash; Boolean - <code>true</code> if the timer is running 
		 </td></tr></table></div><a name="pauseExecution()"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">pauseExecution</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td></tr></table><div class="detailBody"><code> public function pauseExecution():void</code><p></p><p></p><p>
		 Pauses the execution of <code>JavaScript</code> calls.
		 </p></div><a name="removeCall()"></a><a name="removeCall(int)"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">removeCall</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td></tr></table><div class="detailBody"><code> public function removeCall(id:int):Boolean</code><p></p><p></p><p>
		 Removes a <code>JavaScript</code> call from stack.
		 
		 </p><p><span class="label"> Parameters </span><table cellpadding="0" cellspacing="0" border="0"><tr><td width="20px"></td><td><code><span class="label">id</span>:int</code> &mdash; identifier position of call which was returned from <code>addCall</code> method.
		 
		 </td></tr></table></p><p></p><span class="label">Returns</span><table cellpadding="0" cellspacing="0" border="0"><tr><td width="20"></td><td><code>Boolean</code> &mdash; function found an removed, <code>false</code> if already called
		 </td></tr></table></div><a name="startExecution()"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">startExecution</td><td class="detailHeaderParens">()</td><td class="detailHeaderType">method</td><td class="detailHeaderRule">&nbsp;</td></tr></table><div class="detailBody"><code> public function startExecution():void</code><p></p><p></p><p>
		 Restarts the execution of <code>JavaScript</code> calls. 
		 </p></div><div class="detailSectionHeader">Constant Detail</div><a name="constantDetail"></a><a name="STACK_MODE_FIFO"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">STACK_MODE_FIFO</td><td class="detailHeaderType">Constant</td></tr></table><div class="detailBody"><code>public static const STACK_MODE_FIFO:int = 1</code><p></p></div><a name="constantDetail"></a><a name="STACK_MODE_LIFO"></a><table class="detailHeader" cellpadding="0" cellspacing="0"><tr><td class="detailHeaderName">STACK_MODE_LIFO</td><td class="detailHeaderType">Constant</td><td class="detailHeaderRule">&nbsp;</td></tr></table><div class="detailBody"><code>public static const STACK_MODE_LIFO:int = 0</code><p></p></div><br/><br/><hr><br/><p></p><center class="copyright"><footer></footer><br/>Fri Nov 19 2010, 04:17 PM Z  </center></div></body></html><!--<br/>Fri Nov 19 2010, 04:17 PM Z  -->